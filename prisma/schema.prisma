generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  email          String   @unique
  name           String?
  surname        String?
  role           Role     @default(CONTRIBUTOR)
  password       String
  profilePhotoId Int?
  uploadedMedia  Media[]  @relation("MediaAuthor")
  posts          Post[]
  profilePhoto   Media?   @relation("UserProfile", fields: [profilePhotoId], references: [id])
  Menu           Menu[]
}

model Media {
  id                   Int      @id @default(autoincrement())
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  authorId             Int
  file                 String
  alt                  String?
  title                String?
  author               User     @relation("MediaAuthor", fields: [authorId], references: [id])
  usersWithThisProfile User[]   @relation("UserProfile")
}

model Post {
  id           Int        @id @default(autoincrement())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  type         PostType   @default(PAGE)
  authorId     Int
  author       User       @relation(fields: [authorId], references: [id])
  translations PostLang[]
}

model PostLang {
  id              Int        @id @default(autoincrement())
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  postId          Int
  languageCode    String     @db.VarChar(5)
  status          PostStatus @default(DRAFT)
  title           String
  slug            String
  blocks          Json       @default("{}")
  searchText      String?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  post            Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, languageCode])
  @@index([languageCode])
}

model Menu {
  id           Int        @id @default(autoincrement())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  location     String?
  authorId     Int
  author       User       @relation(fields: [authorId], references: [id])
  translations MenuLang[]
}

model MenuLang {
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  menuId       Int
  languageCode String         @db.VarChar(5)
  title        String
  menu         Menu           @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items        MenuLangItem[]

  @@unique([menuId, languageCode])
  @@index([languageCode])
}

model MenuLangItem {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  menuLangId Int
  title      String
  url        String
  order      Int      @default(0)
  parentId   Int?

  parent   MenuLangItem?  @relation("MenuItemChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children MenuLangItem[] @relation("MenuItemChildren")
  menuLang MenuLang       @relation(fields: [menuLangId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  CONTRIBUTOR
}

enum PostType {
  PAGE
}

enum PostStatus {
  DRAFT
  PUBLISHED
}
